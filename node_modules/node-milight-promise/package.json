{
  "name": "node-milight-promise",
  "version": "0.0.3",
  "description": "A node module to control Milight LED bulbs and OEM equivalents auch as Rocket LED, Limitless LED Applamp, Easybulb, s`luce, iLight, iBulb, and Kreuzer",
  "author": {
    "name": "Marcus Wittig",
    "url": "https://github.com/mwittig/node-milight-promise"
  },
  "main": "src/index",
  "homepage": "https://github.com/mwittig/node-milight-promise",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/mwittig/node-milight-promise"
  },
  "bugs": {
    "url": "https://github.com/mwittig/node-milight-promise/issues"
  },
  "keywords": [
    "SmartHome",
    "Milight",
    "WifiLight",
    "LED"
  ],
  "dependencies": {
    "bluebird": ">=2.9.24"
  },
  "readme": "# node-milight-promise\r\n\r\nA node module to control Milight LED bulbs and OEM equivalents auch as Rocket LED, Limitless LED Applamp, \r\n Easybulb, s`luce, iLight, iBulb, and Kreuzer. This library use Promises to automatically synchronize the command \r\n sequences. So there is no need for nesting commands using callback. Of course, each API call returns a promise which\r\n can be used to wait for the call to be resolved or rejected.\r\n\r\n## Introduction\r\n\r\nMilight uses a very primitive three-byte-sequence one-way communication proptocol where each command must be sent in a \r\n single UDP packet. It is fire & forget really similar to simply RF protocols fro garage door openers and such.\r\n Compared to other Milight libraries I am using a more more aggressive timing for the delay between sending UDP command \r\n packets (```delayBetweenCommands``` property). \r\n Generally, the delay is to reduce the chances of UDP package loss on the network. A longer delay may lower the risk of \r\n data loss, however, data loss is likely to occur occasionally on a wireless network. Keep in mind, that apart from your \r\n Wifi network there is another lossy communications channel between the Milight Controller and the bulbs. My strategy \r\n against loss is to repeat each command send three times (```commandRepeat``` property). \r\n\r\n## Usage Example\r\n\r\n    var Milight = require('../src/index').MilightController;\r\n    var commands = require('../src/index').commands;\r\n    \r\n    \r\n    var light = new Milight({\r\n            ip: \"255.255.255.255\",\r\n            delayBetweenCommands: 35,\r\n            commandRepeat: 3\r\n        }),\r\n        zone = 1;\r\n    \r\n    light.sendCommands(commands.rgbw.on(zone), commands.rgbw.brightness(100));\r\n    for (var x=0; x<256; x++) {\r\n        light.sendCommands( commands.rgbw.on(zone), commands.rgbw.hue(x));\r\n    }\r\n    light.pause(1000);\r\n    light.sendCommands(commands.rgbw.on(zone), commands.rgbw.whiteMode(zone));\r\n    \r\n    light.close();\r\n    \r\nInstead of providing the broadcast IP address which is the default, you should provide the IP address \r\n of the Milight Controller for unicast mode.\r\n    \r\n## History\r\n\r\n* 20150426, V0.0.1\r\n    * Initial Version\r\n\r\n* 20150510, V0.0.2\r\n    * Improved and simplified synchronization of command sequences\r\n    * Added repeat mode to send each sequences multiple times\r\n* 20150901, V0.0.3\r\n    * Corrected commands, added RGBW night mode, and cleanup - big thanks to @dotsam for his contribution!\r\n    * Revised license information to provide a SPDX 2.0 license identifier according to npm v2.1 guidelines \r\n      on license metadata - see also https://github.com/npm/npm/releases/tag/v2.10.0\r\n",
  "readmeFilename": "README.md",
  "_id": "node-milight-promise@0.0.3",
  "dist": {
    "shasum": "bb81e03f9e8c800d87121993dce3a022ac0a3af9"
  },
  "_from": "node-milight-promise@0.0.3",
  "_resolved": "https://registry.npmjs.org/node-milight-promise/-/node-milight-promise-0.0.3.tgz"
}
